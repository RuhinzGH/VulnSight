import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import vulnerabilityTypes from "../data/vulnerabilityTypes";
import "./VulnerabilitySelection.css";

function VulnerabilitySelection({
  selectedVulnerabilities,
  onToggle,
  selectAll,
  onScanResults,
  isScanning,
  setIsScanning,
}) {
  const navigate = useNavigate();
  const [selectAllState, setSelectAllState] = useState(false);

  const standardVulns = vulnerabilityTypes.slice(0, 12);
  const simulationVulns = vulnerabilityTypes.slice(12);

  // --- Handle select all ---
  const handleSelectAll = (checked) => {
    setSelectAllState(checked);
    const allIds = standardVulns.map((v) => v.id);
    selectAll(checked ? allIds : []);
  };

  // --- Run Scan ---
  const handleScan = async () => {
    if (selectedVulnerabilities.length === 0) {
      alert("Please select at least one vulnerability to scan!");
      return;
    }

    setIsScanning(true);
    try {
      const response = await fetch("http://127.0.0.1:8000/scan", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ vulnerabilities: selectedVulnerabilities }),
      });

      const data = await response.json();
      console.log("Scan results:", data);
      onScanResults(data); // ðŸ”¥ Send results back to parent
    } catch (error) {
      console.error("Scan error:", error);
      alert("Scan failed. Please check your backend connection.");
    } finally {
      setIsScanning(false);
    }
  };

  // --- Card renderers ---
  const renderStandardCards = (vulns) =>
    vulns.map((v) => {
      const checked = selectedVulnerabilities.includes(v.id);
      return (
        <div
          key={v.id}
          className={`vulnerability-card ${checked ? "selected" : ""}`}
          onClick={() => !isScanning && onToggle(v.id)}
        >
          <div className="flex items-start justify-between">
            <h3>{v.name}</h3>
            <input
              type="checkbox"
              checked={checked}
              onChange={() => onToggle(v.id)}
              disabled={isScanning}
              className="vuln-checkbox"
              onClick={(e) => e.stopPropagation()}
            />
          </div>
          <p>{v.description}</p>
        </div>
      );
    });

  const renderSimulationCards = () =>
    simulationVulns.map((v) => {
      const runSimulation = () => {
        if (isScanning) return;
        const route =
          v.id.toLowerCase().includes("dos")
            ? "/simulation/dos"
            : "/simulation/mitm";
        navigate(route);
      };

      return (
        <div key={v.id} className="vulnerability-card simulation-card">
          <div className="flex items-start justify-between">
            <h3>{v.name}</h3>
          </div>
          <p>{v.description}</p>
          <button
            onClick={runSimulation}
            disabled={isScanning}
            className={`w-full mt-2 py-2 font-semibold rounded ${
              v.id.toLowerCase().includes("dos")
                ? "bg-purple-600 hover:bg-purple-700 text-white"
                : "bg-amber-600 hover:bg-amber-700 text-white"
            }`}
          >
            {v.id.toLowerCase().includes("dos") ? "Run DoS Demo" : "Run MITM Demo"}
          </button>
        </div>
      );
    });

  return (
    <div className="vulnerability-checks-card">
      {/* Header */}
      <div className="vuln-header-row">
        <h2 className="vuln-check">Vulnerability Checks</h2>
        <div className="flex items-center space-x-3">
          <span className="text-lg text-green-400">Select All</span>
          <label className="switch scale-90">
            <input
              type="checkbox"
              checked={selectAllState}
              onChange={(e) => handleSelectAll(e.target.checked)}
              disabled={isScanning}
            />
            <span className="slider"></span>
          </label>
        </div>
      </div>

      {/* Standard Vulnerabilities */}
      <h2 className="section-title">Standard Checks</h2>
      <div className="vuln-grid">{renderStandardCards(standardVulns)}</div>

      {/* Simulation Vulnerabilities */}
      <h2 className="section-title">Simulation Checks</h2>
      <div className="vuln-grid">{renderSimulationCards()}</div>

      {/* Start Scan
      <button
        onClick={handleScan}
        disabled={isScanning}
        className="mt-6 px-6 py-2 bg-green-600 hover:bg-green-700 rounded text-white font-semibold w-full"
      >
        {isScanning ? "Scanning..." : "Start Scan"}
      </button> */}
    </div>
  );
}

export default VulnerabilitySelection;
