import React from "react";
import { createPortal } from "react-dom";

// ðŸŽ¨ Function to map severity â†’ color
function colorFor(severity = "") {
  switch (String(severity).toLowerCase()) {
    case "critical":
    case "high":
      return "#ff4c4c";
    case "medium":
      return "#ffae42";
    case "low":
      return "#22c55e";
    default:
      return "#888888";
  }
}

// ðŸ“š Function to auto-generate references based on vulnerability name
function getVulnerabilityLinks(name = "") {
  const n = name.toLowerCase();

  if (n.includes("sql")) {
    return [
      {
        label: "OWASP SQL Injection Prevention",
        url: "https://owasp.org/www-community/attacks/SQL_Injection",
      },
      {
        label: "CWE-89: SQL Injection",
        url: "https://cwe.mitre.org/data/definitions/89.html",
      },
    ];
  }

  if (n.includes("xss")) {
    return [
      {
        label: "OWASP Cross-Site Scripting (XSS) Prevention",
        url: "https://owasp.org/www-community/attacks/xss/",
      },
      {
        label:
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        url: "https://cwe.mitre.org/data/definitions/79.html",
      },
    ];
  }

  if (n.includes("csrf")) {
    return [
      {
        label: "OWASP Cross-Site Request Forgery (CSRF)",
        url: "https://owasp.org/www-community/attacks/csrf",
      },
      {
        label: "CWE-352: Cross-Site Request Forgery (CSRF)",
        url: "https://cwe.mitre.org/data/definitions/352.html",
      },
    ];
  }

  if (n.includes("directory") || n.includes("traversal")) {
    return [
      {
        label: "OWASP Path Traversal",
        url: "https://owasp.org/www-community/attacks/Path_Traversal",
      },
      {
        label: "CWE-22: Path Traversal",
        url: "https://cwe.mitre.org/data/definitions/22.html",
      },
    ];
  }

  if (n.includes("command") || n.includes("injection")) {
    return [
      {
        label: "OWASP Command Injection",
        url: "https://owasp.org/www-community/attacks/Command_Injection",
      },
      {
        label: "CWE-77: Command Injection",
        url: "https://cwe.mitre.org/data/definitions/77.html",
      },
    ];
  }

  // Default fallback references
  return [
    { label: "OWASP Vulnerability Overview", url: "https://owasp.org" },
    { label: "CWE Database", url: "https://cwe.mitre.org" },
    { label: "NIST Guidelines", url: "https://csrc.nist.gov/" },
  ];
}

// ðŸ’¬ Modal Component
export default function VulnerabilityDetailsModal({ vulnerability, onClose }) {
  if (!vulnerability) return null;

  const c = colorFor(vulnerability.severity || "");

  const modal = (
    <div
      className="vuln-modal-overlay"
      onClick={onClose}
      role="dialog"
      aria-modal="true"
    >
      <div
        className="details-modal"
        onClick={(e) => e.stopPropagation()} // prevent outside click from closing
      >
        {/* Close Button (red X) */}
        <button
          type="button"
          onClick={onClose}
          aria-label="Close"
          style={{
            position: "absolute",
            top: 12,
            right: 12,
            background: "transparent",
            border: "none",
            padding: 6,
            cursor: "pointer",
            display: "inline-flex",
            alignItems: "center",
            justifyContent: "center",
            color: c,
          }}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="#ff4c4c"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            aria-hidden="true"
          >
            <path d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>

        {/* Header / Title */}
        <div className="details-modal-header">
          <h3 className="details-modal-title">
            {vulnerability.name || "Unnamed Vulnerability"}
          </h3>
        </div>

        {/* Severity Badge */}
        <div className="mb-4">
          <span
            className="details-badge"
            style={{
              backgroundColor: `${c}20`,
              color: c,
              border: `1px solid ${c}`,
            }}
          >
            {vulnerability.severity
              ? `${vulnerability.severity} Severity`
              : "Severity Unknown"}
          </span>
        </div>

        {/* Description */}
        <div className="mb-4">
          <h4 className="details-section-title">Description</h4>
          <div className="details-section-content">
            <p>{vulnerability.description || "No description provided."}</p>
          </div>
        </div>

        {/* Recommended Fix */}
        <div className="mb-4">
          <h4 className="details-section-title">Recommended Fix</h4>
          <div className="details-section-content">
            <p>{vulnerability.fix || "No fix recommendation available."}</p>
          </div>
        </div>

        {/* References (auto-detected) */}
        <div className="mb-4">
          <h4 className="details-section-title">References</h4>
          <div className="details-section-content">
            <ul className="list-disc list-inside">
              {getVulnerabilityLinks(vulnerability.name).map((ref, i) => (
                <li key={i}>
                  <a
                    className="details-link"
                    href={ref.url}
                    target="_blank"
                    rel="noreferrer"
                  >
                    {ref.label}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>

      {/* Scoped Styles */}
      <style>{`
        .vuln-modal-overlay {
          position: fixed;
          inset: 0;
          z-index: 9999;
          display: flex;
          align-items: center;
          justify-content: center;
          background: rgba(5, 8, 10, 0.65);
          backdrop-filter: blur(8px);
          -webkit-backdrop-filter: blur(8px);
          padding: 1rem;
        }

        .details-modal {
          width: 100%;
          max-width: 48rem;
          max-height: 90vh;
          overflow-y: auto;
          background-color: #0b0f12;
          border-radius: 1rem;
          color: #c7e8c7;
          font-family: 'Inter', sans-serif;
          padding: 2rem;
          border: 1px solid #1c2a1c;
          position: relative;
          box-shadow: 0 10px 25px rgba(0,0,0,0.6), 0 0 8px rgba(34,197,94,0.08);
        }

        .details-modal-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 1rem;
        }

        .details-modal-title {
          font-size: 1.5rem;
          font-weight: 700;
          color: #22c55e;
          margin: 0;
        }

        .details-section-title {
          color: #34d399;
          font-weight: 500;
          margin-bottom: 0.5rem;
          font-size: 1.125rem;
        }

        .details-section-content {
          color: #e2e8f0;
          background-color: #111621;
          padding: 0.75rem;
          border-radius: 0.5rem;
          margin-bottom: 1rem;
          border: 1px solid #1c2a1c;
        }

        .details-section-content p {
          line-height: 1.5;
          margin: 0;
        }

        .details-badge {
          display: inline-block;
          padding: 0.25rem 0.75rem;
          border-radius: 9999px;
          font-size: 0.75rem;
          font-weight: 500;
          margin-bottom: 1rem;
        }

        .details-link {
          color: #22aaff;
          text-decoration: none;
          transition: color 0.2s ease;
        }

        .details-link:hover {
          color: #4cc9ff;
          text-decoration: underline;
        }
      `}</style>
    </div>
  );

  return createPortal(modal, document.body);
}
